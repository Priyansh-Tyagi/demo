import { useState } from 'react';
import { MessageSquare, Check, Clipboard, Award, FileText, ArrowRight, RefreshCw } from 'lucide-react';

export default function InterviewBot() {
  const [stage, setStage] = useState('setup'); // setup, interview, summary
  const [role, setRole] = useState('');
  const [domain, setDomain] = useState('');
  const [mode, setMode] = useState('');
  const [currentQuestion, setCurrentQuestion] = useState(1);
  const [answer, setAnswer] = useState('');
  const [feedback, setFeedback] = useState(null);
  
  // Mock questions (would come from LLM in production)
  const questions = {
    technical: [
      "Explain how React's virtual DOM works and why it's important.",
      "Describe the difference between useMemo and useCallback hooks.",
      "How would you optimize the performance of a React application?"
    ],
    behavioral: [
      "Tell me about a time when you had to work under a tight deadline.",
      "Describe a situation where you had to resolve a conflict within your team.",
      "Give an example of how you've handled criticism of your work."
    ]
  };
  
  const startInterview = () => {
    if (!role || !mode) return;
    setStage('interview');
    setCurrentQuestion(1);
    setFeedback(null);
  };
  
  const submitAnswer = () => {
    if (!answer.trim()) return;
    
    // Mock feedback (would come from LLM in production)
    const mockFeedback = {
      score: 8,
      strengths: "Good explanation with clear examples",
      improvements: "Could provide more specific technical details",
      suggestions: "Consider mentioning reconciliation process"
    };
    
    setFeedback(mockFeedback);
  };
  
  const nextQuestion = () => {
    if (currentQuestion < (mode === 'technical' ? questions.technical.length : questions.behavioral.length)) {
      setCurrentQuestion(currentQuestion + 1);
      setAnswer('');
      setFeedback(null);
    } else {
      setStage('summary');
    }
  };
  
  const retryQuestion = () => {
    setAnswer('');
    setFeedback(null);
  };
  
  const resetInterview = () => {
    setStage('setup');
    setRole('');
    setDomain('');
    setMode('');
    setCurrentQuestion(1);
    setAnswer('');
    setFeedback(null);
  };
  
  const currentQuestionText = mode === 'technical' 
    ? questions.technical[currentQuestion - 1] 
    : questions.behavioral[currentQuestion - 1];
  
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <header className="text-center mb-10">
          <h1 className="text-3xl font-bold text-gray-800">Interview Preparation Bot</h1>
          <p className="text-gray-600 mt-2">Practice and improve your interview skills with AI-powered feedback</p>
        </header>
        
        {stage === 'setup' && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">Setup Your Interview</h2>
            
            <div className="mb-6">
              <label className="block text-gray-700 mb-2 font-medium">Choose Your Target Role</label>
              <select 
                value={role} 
                onChange={(e) => setRole(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Select a role</option>
                <option value="software-engineer">Software Engineer</option>
                <option value="product-manager">Product Manager</option>
                <option value="data-scientist">Data Scientist</option>
                <option value="ux-designer">UX Designer</option>
              </select>
            </div>
            
            {role && (
              <div className="mb-6">
                <label className="block text-gray-700 mb-2 font-medium">Domain Specialization (Optional)</label>
                <select 
                  value={domain} 
                  onChange={(e) => setDomain(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Any domain</option>
                  <option value="frontend">Frontend</option>
                  <option value="backend">Backend</option>
                  <option value="fullstack">Full Stack</option>
                  <option value="mobile">Mobile Development</option>
                  <option value="ml">Machine Learning</option>
                </select>
              </div>
            )}
            
            {role && (
              <div className="mb-8">
                <label className="block text-gray-700 mb-2 font-medium">Interview Type</label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <button
                    className={`p-4 rounded-lg border ${mode === 'technical' ? 'bg-blue-50 border-blue-500 text-blue-700' : 'border-gray-300 hover:bg-gray-50'}`}
                    onClick={() => setMode('technical')}
                  >
                    <div className="flex items-center justify-center mb-2">
                      <Clipboard size={24} className={mode === 'technical' ? 'text-blue-500' : 'text-gray-500'} />
                    </div>
                    <h3 className="font-medium">Technical Interview</h3>
                    <p className="text-sm text-gray-600 mt-1">Coding, algorithms, system design</p>
                  </button>
                  
                  <button
                    className={`p-4 rounded-lg border ${mode === 'behavioral' ? 'bg-blue-50 border-blue-500 text-blue-700' : 'border-gray-300 hover:bg-gray-50'}`}
                    onClick={() => setMode('behavioral')}
                  >
                    <div className="flex items-center justify-center mb-2">
                      <MessageSquare size={24} className={mode === 'behavioral' ? 'text-blue-500' : 'text-gray-500'} />
                    </div>
                    <h3 className="font-medium">Behavioral Interview</h3>
                    <p className="text-sm text-gray-600 mt-1">STAR format, teamwork, leadership</p>
                  </button>
                </div>
              </div>
            )}
            
            <button
              className={`w-full py-3 px-4 rounded-md font-medium ${role && mode ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
              onClick={startInterview}
              disabled={!role || !mode}
            >
              Start Interview
            </button>
          </div>
        )}
        
        {stage === 'interview' && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="flex justify-between items-center mb-4">
              <div>
                <span className="text-sm font-medium text-gray-500">Question {currentQuestion} of {mode === 'technical' ? questions.technical.length : questions.behavioral.length}</span>
                <h2 className="text-xl font-semibold text-gray-800">{mode === 'technical' ? 'Technical' : 'Behavioral'} Interview</h2>
              </div>
              <div className="text-right">
                <p className="text-sm font-medium text-gray-500">Role: {role.replace('-', ' ')}</p>
                {domain && <p className="text-sm text-gray-500">Domain: {domain}</p>}
              </div>
            </div>
            
            <div className="border-l-4 border-blue-500 bg-blue-50 p-4 mb-6">
              <p className="text-gray-800">{currentQuestionText}</p>
            </div>
            
            {!feedback ? (
              <>
                <div className="mb-4">
                  <label className="block text-gray-700 mb-2 font-medium">Your Answer</label>
                  <textarea
                    value={answer}
                    onChange={(e) => setAnswer(e.target.value)}
                    rows={6}
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder={mode === 'behavioral' ? "Use the STAR format: Situation, Task, Action, Result..." : "Enter your response..."}
                  ></textarea>
                </div>
                
                <button
                  className={`w-full py-3 px-4 rounded-md font-medium ${answer.trim() ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
                  onClick={submitAnswer}
                  disabled={!answer.trim()}
                >
                  Submit Answer
                </button>
              </>
            ) : (
              <div className="mb-6">
                <div className="border-t border-b border-gray-200 py-4 mb-4">
                  <div className="flex items-center mb-2">
                    <Award size={20} className="text-yellow-500 mr-2" />
                    <h3 className="font-medium text-gray-800">Your Score: {feedback.score}/10</h3>
                  </div>
                  
                  <div className="mb-3">
                    <h4 className="text-sm font-medium text-green-700 mb-1">Strengths</h4>
                    <p className="text-gray-700">{feedback.strengths}</p>
                  </div>
                  
                  <div className="mb-3">
                    <h4 className="text-sm font-medium text-orange-700 mb-1">Areas for Improvement</h4>
                    <p className="text-gray-700">{feedback.improvements}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-blue-700 mb-1">Suggestions</h4>
                    <p className="text-gray-700">{feedback.suggestions}</p>
                  </div>
                </div>
                
                <div className="flex flex-col sm:flex-row gap-3">
                  <button
                    className="flex-1 py-2 px-4 border border-gray-300 rounded-md font-medium text-gray-700 hover:bg-gray-50 flex items-center justify-center"
                    onClick={retryQuestion}
                  >
                    <RefreshCw size={18} className="mr-2" />
                    Retry Question
                  </button>
                  
                  <button
                    className="flex-1 py-2 px-4 bg-blue-600 text-white rounded-md font-medium hover:bg-blue-700 flex items-center justify-center"
                    onClick={nextQuestion}
                  >
                    {currentQuestion < (mode === 'technical' ? questions.technical.length : questions.behavioral.length) ? (
                      <>Next Question <ArrowRight size={18} className="ml-2" /></>
                    ) : (
                      <>Complete Interview <Check size={18} className="ml-2" /></>
                    )}
                  </button>
                </div>
              </div>
            )}
          </div>
        )}
        
        {stage === 'summary' && (
          <div className="bg-white rounded-lg shadow-md p-6">
            <div className="text-center mb-6">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
                <Award size={32} className="text-green-600" />
              </div>
              <h2 className="text-2xl font-bold text-gray-800">Interview Complete!</h2>
              <p className="text-gray-600">Here's your performance summary</p>
            </div>
            
            <div className="bg-gray-50 rounded-lg p-5 mb-6">
              <h3 className="text-lg font-medium text-gray-800 mb-3">Overall Assessment</h3>
              
              <div className="mb-4">
                <div className="flex justify-between items-center mb-1">
                  <span className="text-sm font-medium text-gray-700">Technical Knowledge</span>
                  <span className="text-sm font-medium text-blue-600">7.5/10</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div className="bg-blue-600 h-2 rounded-full" style={{ width: '75%' }}></div>
                </div>
              </div>
              
              <div className="mb-4">
                <div className="flex justify-between items-center mb-1">
                  <span className="text-sm font-medium text-gray-700">Communication</span>
                  <span className="text-sm font-medium text-blue-600">8/10</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div className="bg-blue-600 h-2 rounded-full" style={{ width: '80%' }}></div>
                </div>
              </div>
              
              <div className="mb-4">
                <div className="flex justify-between items-center mb-1">
                  <span className="text-sm font-medium text-gray-700">Problem Solving</span>
                  <span className="text-sm font-medium text-blue-600">8.5/10</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div className="bg-blue-600 h-2 rounded-full" style={{ width: '85%' }}></div>
                </div>
              </div>
              
              <div>
                <div className="flex justify-between items-center mb-1">
                  <span className="text-sm font-medium text-gray-700">Overall Score</span>
                  <span className="text-sm font-medium text-blue-600">8/10</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div className="bg-blue-600 h-2 rounded-full" style={{ width: '80%' }}></div>
                </div>
              </div>
            </div>
            
            <div className="mb-6">
              <h3 className="text-lg font-medium text-gray-800 mb-3">Key Takeaways</h3>
              
              <div className="mb-4">
                <h4 className="text-sm font-medium text-green-700 mb-1">Strengths</h4>
                <ul className="list-disc pl-5 text-gray-700 space-y-1">
                  <li>Strong technical fundamentals with clear explanations</li>
                  <li>Good example-driven answers in behavioral questions</li>
                  <li>Logical problem-solving approach</li>
                </ul>
              </div>
              
              <div>
                <h4 className="text-sm font-medium text-orange-700 mb-1">Areas for Improvement</h4>
                <ul className="list-disc pl-5 text-gray-700 space-y-1">
                  <li>Include more specific metrics in your STAR responses</li>
                  <li>Consider edge cases when discussing technical solutions</li>
                  <li>Be more concise in some of your explanations</li>
                </ul>
              </div>
            </div>
            
            <div className="mb-8">
              <h3 className="text-lg font-medium text-gray-800 mb-3">Recommended Resources</h3>
              <ul className="list-disc pl-5 text-gray-700 space-y-1">
                <li>"Cracking the Coding Interview" for algorithm practice</li>
                <li>"System Design Interview" by Alex Xu for architecture questions</li>
                <li>Practice behavioral storytelling with the STAR method</li>
              </ul>
            </div>
            
            <div className="flex flex-col sm:flex-row gap-3">
              <button
                className="flex-1 py-2 px-4 border border-gray-300 rounded-md font-medium text-gray-700 hover:bg-gray-50 flex items-center justify-center"
                onClick={resetInterview}
              >
                <RefreshCw size={18} className="mr-2" />
                Start New Interview
              </button>
              
              <button
                className="flex-1 py-2 px-4 bg-blue-600 text-white rounded-md font-medium hover:bg-blue-700 flex items-center justify-center"
              >
                <FileText size={18} className="mr-2" />
                Export Summary
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
